import sqlite3
from flask import Flask, render_template, redirect, url_for, request

app = Flask(__name__)

def get_db_connection():
	connection = sqlite3.connect('/home/ubuntu/flaskapp/database.db')
	return connection

def insertUser(username, password, firstName, lastName, email):
	connection = get_db_connection()
	cur = connection.cursor()
	cur.execute("INSERT INTO users (username, password, firstName, lastName, email) VALUES (?,?,?,?,?)", (username, password, firstName, lastName, email))
	connection.commit()
	connection.close()



@app.route('/')
def home():
	return render_template('home.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
	if request.method == 'POST':
		conn = get_db_connection()
		cur = conn.cursor()
		username = request.form['username']
		password = request.form['password']
		cur.execute("SELECT * from users where username = (?) AND password = (?)", [username, password])
		user = cur.fetchone()
		user = None
		if (user is not None):
			conn.close()
			return redirect(url_for('profile'))
		else:
			userList = ""
			cur.execute("SELECT * FROM users")
			for row in cur:
				userList = userList + "{}, {}, {}, {}, {}, {}, {}\n".format(row[0], row[1], row[2], row[3], row[4], row[5], row[6])
			conn.close()
			return render_template('login.html', error=userList)
	elif request.method == 'GET':
		return render_template('login.html')


@app.route('/account_creation', methods=['GET', 'POST'])
def createAccount():
	if request.method == 'POST':
		username = request.form['username']
		password = request.form['password']
		firstName = request.form['firstName']
		lastName = request.form['lastName']
		email = request.form['email']
		if (username is  None or  password is None or firstName is None or lastName is None or email is None):
			return render_template('createAccount.html', error="Please make sure all fields are filled out")
		else:
			try:
				conn = get_db_conncetion()
				cur = conn.cursor()
				cur.execute("INSERT INTO users (username, password, firstName, lastName, email) VALUES (?,?,?,?,?)", [username, password, firstName, lastName, email])
				conn.commit()
			except:
				conn.rollback()
				return render_template('createAccount.html', error="Couldn't create account")
			finally:
				cur.close()
				conn.close()
				return redirect(url_for('home'))
	else:
		return render_template('createAccount.html')

@app.route('/profile')
def profile():
	return render_template('profile.html')


if __name__ == '__main__':
	app.run()
